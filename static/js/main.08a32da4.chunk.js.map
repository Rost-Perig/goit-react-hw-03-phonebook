{"version":3,"sources":["componets/InputsForm/InputsForm.module.css","componets/ContactList/ContactList.module.css","componets/ContactData/ContactData.module.css","componets/FindForm/FindForm.module.css","componets/Section/Section.js","componets/InputsForm/InputsForm.js","componets/ContactData/ContactData.js","componets/FindForm/FindForm.js","componets/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","Section","children","title","className","InputsForm","state","subscriber","number","handleInputChange","e","setState","currentTarget","name","value","uuidv4","handleSubmit","preventDefault","props","contactToUp","reset","this","s","frame","onSubmit","form","input","type","onChange","pattern","required","btn","Component","ContactData","contactObj","id","textItem","onClick","idToUp","target","dataset","key","FindForm","inputValue","findInputChange","transDataToUp","onBlur","ContactList","findData","tempContactArr","getContactList","contactArr","sort","a","b","localeCompare","getFindData","data","list","filter","item","toLowerCase","includes","map","listItem","App","contacts","contactEraser","tempArr","splice","findIndex","appStateChanger","alert","prevState","localStorage","getItem","JSON","parse","prevProps","length","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.08a32da4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"InputsForm_frame__1P2TM\",\"form\":\"InputsForm_form__EQMRG\",\"input\":\"InputsForm_input__3lbj4\",\"btn\":\"InputsForm_btn__3gK2V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3MTIW\",\"listItem\":\"ContactList_listItem__rlbmq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"ContactData_textItem__ZI4ju\",\"btn\":\"ContactData_btn__3DGpF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"FindForm_frame__2OlTo\",\"input\":\"FindForm_input__2z-d2\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <section>\r\n        <div className=\"container\">\r\n        <h2>{title}</h2>\r\n            {children}\r\n         </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './InputsForm.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass InputsForm extends Component {\r\n    state = {\r\n    subscriber: '',\r\n    number: ''\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      [e.currentTarget.name]: e.currentTarget.value,\r\n      id: uuidv4()\r\n    })\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.contactToUp(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => this.setState({ subscriber: '', number: '' });\r\n\r\n  render() {\r\n    const {subscriber, number} = this.state\r\n    const { handleSubmit, handleInputChange } = this;\r\n    return (\r\n      <div className={s.frame}>\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <h3>Name</h3>\r\n            <label >\r\n              <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"subscriber\"\r\n                value={subscriber}\r\n                onChange={handleInputChange}  \r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </label>\r\n            \r\n            <h3>Number</h3>\r\n\r\n            <label>\r\n                <input\r\n                className={s.input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                onChange={handleInputChange} \r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </label> \r\n          <button type=\"submit\" className={s.btn}>Add contact</button> \r\n        </form> \r\n      </div>\r\n    )\r\n  };\r\n};\r\n\r\nInputsForm.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default InputsForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactData.module.css';\r\n\r\nclass ContactData extends Component {\r\n    render() {\r\n        const {subscriber, id, number} = this.props.contactObj;\r\n        return (\r\n            <>\r\n                <p className={s.textItem}>\r\n                    <span>{subscriber}:</span>\r\n                    <span>{number}</span>\r\n                </p>\r\n                <button\r\n                    className={s.btn}\r\n                    type={\"button\"}\r\n                    data-key={id}\r\n                    onClick={e => this.props.idToUp(e.target.dataset.key)}\r\n                >\r\n                    Delete\r\n                </button>\r\n            </>\r\n        ); \r\n    };\r\n    \r\n};\r\n\r\nContactData.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactData;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FindForm.module.css'\r\n\r\nclass FindForm extends Component {\r\n    state = {\r\n        inputValue: ''\r\n    }\r\n\r\n    findInputChange = e => {\r\n        this.setState({\r\n            inputValue: e.currentTarget.value,\r\n        });\r\n        this.props.transDataToUp(e.currentTarget.value);\r\n    }\r\n\r\n    reset = (e) => this.setState({ inputValue: '' });\r\n\r\n    render() {\r\n        const { inputValue } = this.state;\r\n        const { findInputChange, reset } = this;\r\n        return(\r\n           <div className={s.frame}>\r\n                <h3>Find contacts by name</h3>\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    name=\"find\"\r\n                    value={inputValue}\r\n                    onChange={findInputChange}\r\n                    onBlur={reset}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </div>\r\n        )\r\n    };  \r\n};\r\n\r\nFindForm.propTypes = {\r\n    inputValue: PropTypes.string\r\n};\r\n\r\nexport default FindForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css'\r\nimport ContactData from '../ContactData';\r\nimport FindForm from '../FindForm';\r\n\r\n\r\nclass ContactList extends Component {\r\n    state = {\r\n        findData: \"\"\r\n    };\r\n\r\n    tempContactArr = [];\r\n\r\n    getContactList = () => {\r\n        this.tempContactArr = [...this.props.contactArr].sort((a, b) => a.subscriber.localeCompare(b.subscriber));\r\n    };\r\n\r\n    getFindData = (data) => {\r\n        this.setState({ findData: data })\r\n    };\r\n    \r\n    render() {\r\n           this.getContactList(); \r\n        return (\r\n            <div>\r\n\r\n                <FindForm transDataToUp={this.getFindData }/>\r\n                \r\n               <ul className={s.list}>\r\n                {[...this.tempContactArr].filter(item => item.subscriber.toLowerCase().includes(this.state.findData.toLowerCase())).map(item => {\r\n                    const { id } = item;\r\n                    return (\r\n                        <li key={id} className={s.listItem}>\r\n                            < ContactData contactObj={item} idToUp={this.props.idToUp} />\r\n                        </li>\r\n                    );\r\n                })}\r\n                </ul>\r\n                \r\n            </div>   \r\n        );\r\n    };  \r\n};\r\n\r\nContactList.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\nimport './App.css';\nimport Section from './componets/Section';\nimport InputsForm from './componets/InputsForm';\nimport ContactList from './componets/ContactList';\n\nclass App extends Component {\n  state = {\n    contacts: []\n  };\n\n  contactEraser = data => {\n    this.setState(() => {\n      let tempArr = [...this.state.contacts];\n      // let deleteObjIndex = tempArr.findIndex(item => item.id === data);\n      // tempArr.splice(deleteObjIndex , 1);\n      tempArr.splice(tempArr.findIndex(item => item.id === data), 1);\n      return ({\n        contacts: tempArr,\n      });\n    });\n  };\n\n\n  appStateChanger = data => {\n    if (this.state.contacts.findIndex(item => item.subscriber === data.subscriber) !== -1) {\n      return alert(`Абонент с именем ${data.subscriber} уже существует!`);\n    };\n\n    if (this.state.contacts.findIndex(item => item.number === data.number) !== -1) {\n      return alert(`Такой номер ${data.number} уже присвоен другому абоненту!`);\n    };\n\n    this.setState((prevState) => {\n      return (\n        {\n          contacts: [...prevState.contacts, data]\n        }\n      )\n    }) \n  };\n\n  componentDidMount() {\n    if (localStorage.getItem('contacts')) {\n      this.setState({ contacts: JSON.parse(localStorage.getItem('contacts')) });\n    }; \n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts.length !== this.state.contacts.length) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts)); \n  };\n  \n};\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Section title={\"Phonebook\"}>\n        <InputsForm contactToUp={this.appStateChanger}/>\n      </Section>\n      <Section title={\"Contacts\"}>\n          <ContactList contactArr={this.state.contacts} idToUp={this.contactEraser}/>\n      </Section>\n      </div>\n    )\n  };\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\nconsole.log('Привіт, світ! Життя химерне!');\n"],"sourceRoot":""}